#include <WiFi.h>
#include <Arduino.h>
#include <SPI.h>
#include <MFRC522.h>
#include <WiFiClientSecure.h>
#include <zoho-iot-client.h>
#include "certificate.h"

#define SS_PIN 21  // Slave Select pin
#define RST_PIN 22 // Reset pin
#define led1 2
#define led2 4
#define SSID "TP-LINK"
#define PASSWORD "Zohoiot24"

#define MQTT_USERNAME (char *)"/16017zxtea.zohoiothub.in/v1/devices/2468000000144117/connect"
#define MQTT_PASSWORD (char *)"6c11fdeb72e8c6c7649a0cf5b2eb057464c3df55417d1f091cd251f22374bf"

MFRC522 rfid(SS_PIN, RST_PIN); // Create an MFRC522 instance
unsigned long ledOnTime = 0; // To store the time when LED was turned on
const long ledOnDuration = 2000; // Duration for LED to stay on (2 seconds)
bool led1Status = false; // Track LED1 state
bool led2Status = false; // Track LED2 state
String lastCardUID = "";
WiFiClientSecure espClient;
ZohoIOTClient zClient(&espClient, true);
const long interval = 10000;
ZohoIOTClient::commandAckResponseCodes success_response_code = ZohoIOTClient::SUCCESFULLY_EXECUTED;
unsigned long prev_time = 0, current_time = 0;
void on_message(char *topic, uint8_t *payload, unsigned int length) {
  Serial.println("new message recieved");
  String msg = "";
  for (unsigned int itr = 0; itr < length; itr++) {
    msg += (char)payload[itr];
  }
  Serial.print("[ ");
  Serial.print(topic);
  Serial.print(" ] : ");
  Serial.print(msg);
  Serial.println();
  string command_topic_string;
  zClient.get_command_topic(command_topic_string);
  const char *command_topic = command_topic_string.c_str();

  if (strcmp(topic, command_topic) == 0) {
    JsonDocument doc;
    deserializeJson(doc, msg);
    int msglength = doc.size();
    char response_msg[] = "Successfully completed the operation";
    for (int itr = 0; itr < msglength; itr++) {
      JsonObject commandMessageObj = doc[itr];
      const char *correlation_id = commandMessageObj["correlation_id"];
      // Extract "edge_command_key" and "value"
      const char *edge_command_key = commandMessageObj["payload"][0]["edge_command_key"];
      const char *value = commandMessageObj["payload"][0]["value"];

      // Handle calibration command from the cloud
      if (strcmp(edge_command_key, "gate") == 0) {
        if (strcmp(value, "on") == 0) {
          digitalWrite(led1, HIGH);
          ledOnTime = millis(); // Save the time when LED was turned on
          led1Status = true; // Set LED1 status to on
          Serial.println("Gate open");
          zClient.publishCommandAck(correlation_id, success_response_code, response_msg);
        } else if (strcmp(value, "off") == 0){
           digitalWrite(led2, HIGH);
           ledOnTime = millis(); // Save the time when LED was turned on
          led2Status = true; // Set LED2 status to on
          Serial.println("Gate close");
          zClient.publishCommandAck(correlation_id, success_response_code, response_msg);
        }
      }
      else{
        Serial.println("Invalid Gate command");
      }
    }
  }
}

void setup_wifi() {
  if (WiFi.status() == WL_CONNECTED) {
    return;
  }

  delay(10);
  //Connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(SSID);
  WiFi.mode(WIFI_STA);
  WiFi.begin(SSID, PASSWORD);
  delay(10);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void setup() {
  
  Serial.begin(115200);
  SPI.begin(); // Initialize SPI bus
  rfid.PCD_Init(); // Initialize RFID reader
  setup_wifi(); // Initialize WiFi
  espClient.setCACert(root_ca);
  zClient.init(MQTT_USERNAME, MQTT_PASSWORD);
  zClient.connect();
  zClient.subscribe(on_message);
  Serial.println("Ready!");
  Serial.println(F("Scan an RFID card to get its UID"));
  pinMode(led1,OUTPUT);
  pinMode(led2,OUTPUT);
  digitalWrite(led1,LOW);
  digitalWrite(led2,LOW);
}

void loop() {
  // Maintain WiFi and MQTT connection
  setup_wifi();
  zClient.reconnect();

  // Check if LED1 should be turned off after 2 seconds
  if (led1Status && (millis() - ledOnTime >= ledOnDuration)) {
    digitalWrite(led1, LOW); // Turn off LED1 after 2 seconds
    led1Status = false; // Reset LED1 status
  }

  // Check if LED2 should be turned off after 2 seconds
  if (led2Status && (millis() - ledOnTime >= ledOnDuration)) {
    digitalWrite(led2, LOW); // Turn off LED2 after 2 seconds
    led2Status = false; // Reset LED2 status
  }

  if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
    String cardUID = "";
    for (uint8_t i = 0; i < rfid.uid.size; i++) {
      cardUID += String(rfid.uid.uidByte[i], HEX);
    }

    Serial.print("UID of the card: ");
    Serial.println(cardUID);

    // Send card UID to the cloud
    zClient.addDataPointString("card", std::string(cardUID.c_str()));
    String payload = zClient.getPayload().c_str();
    Serial.println("Dispatching message: " + payload);

    int rc = zClient.dispatch();
    if (rc == zClient.SUCCESS) {
      Serial.println("Message published successfully");
    } else {
      Serial.println("Failed to publish message");
    }

    rfid.PICC_HaltA();
    rfid.PCD_StopCrypto1();
  }

  zClient.zyield();
}
